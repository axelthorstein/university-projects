package com.ru.usty.scheduling;

import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import com.badlogic.gdx.utils.Timer;
import com.badlogic.gdx.utils.Timer.Task;
import com.ru.usty.scheduling.process.ProcessExecution;

public class Scheduler {

	ProcessExecution processExecution;
	Policy policy;
	int quantum;
	ArrayList<Integer> processes;
	Thread timeSlice;
	long timeSliceID;
	int currentProcess;
	long startTime;
	boolean sliceFinished;

	/**
	 * Add any objects and variables here (if needed)
	 */


	/**
	 * DO NOT CHANGE DEFINITION OF OPERATION
	 */
	public Scheduler(ProcessExecution processExecution) {
		this.processExecution = processExecution;

		/**
		 * Add general initialization code here (if needed)
		 */
	}

	/**
	 * DO NOT CHANGE DEFINITION OF OPERATION
	 */
	public void startScheduling(Policy policy, int quantum) {

		this.policy = policy;
		this.quantum = quantum;
		this.processes = new ArrayList<Integer>();
		this.currentProcess = -1;
		

		/**
		 * Add general initialization code here (if needed)
		 */

		switch(policy) {
		case FCFS:	//First-come-first-served
			System.out.println("Starting new scheduling task: First-come-first-served");
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			break;
		case RR:	//Round robin
			System.out.println("Starting new scheduling task: Round robin, quantum = " + quantum);
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			this.startTime = System.nanoTime();
			this.sliceFinished = false;
			this.timeSliceID = -1;
			break;
		case SPN:	//Shortest process next
			System.out.println("Starting new scheduling task: Shortest process next");
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			break;
		case SRT:	//Shortest remaining time
			System.out.println("Starting new scheduling task: Shortest remaining time");
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			break;
		case HRRN:	//Highest response ratio next
			System.out.println("Starting new scheduling task: Highest response ratio next");
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			break;
		case FB:	//Feedback
			System.out.println("Starting new scheduling task: Feedback, quantum = " + quantum);
			/**
			 * Add your policy specific initialization code here (if needed)
			 */
			break;
		}

		/**
		 * Add general scheduling or initialization code here (if needed)
		 */

	}

	/**
	 * DO NOT CHANGE DEFINITION OF OPERATION
	 */
	public void processAdded(int processID) {

		switch(policy) {
		case FCFS:	//First-come-first-served
			firstComeFirstServe(true, processID);
			break;
		case RR:	//Round robin
			roundRobin(true, processID);
			break;
		case SPN:	//Shortest process next
			shortestProcessNext(true, processID);
			break;
		case SRT:	//Shortest remaining time
			shortestRemainingTime(true, processID);
			break;
		case HRRN:	//Highest response ratio next
			highestResponseRatioNext(true, processID);
			break;
		case FB:	//Feedback
			feedback(true, processID);
			break;
		}
	}

	/**
	 * DO NOT CHANGE DEFINITION OF OPERATION
	 */
	public void processFinished(int processID) {

		/**
		 * Add scheduling code here
		 */
		switch(policy) {
		case FCFS:	//First-come-first-served
			firstComeFirstServe(false, processID);
			break;
		case RR:	//Round robin
			roundRobin(false, processID);
			break;
		case SPN:	//Shortest process next
			shortestProcessNext(false, processID);
			break;
		case SRT:	//Shortest remaining time
			shortestRemainingTime(false, processID);
			break;
		case HRRN:	//Highest response ratio next
			highestResponseRatioNext(false, processID);
			break;
		case FB:	//Feedback
			feedback(false, processID);
			break;
		}
	}
	
	public void firstComeFirstServe(boolean adding, int processID) {
		if (adding) {
			if (processes.size() == 0) {
				processes.add(processID);
				processExecution.switchToProcess(processID);
			} else {
				processes.add(processID);
			}
		} else {
			processes.remove(0);
			System.out.println("Removed process: " + processID + ", processes: " + processes);
			if (processes.size() > 0) {
				System.out.println("Adding new process: " + processes.get(0) + ", processes: " + processes);
				processExecution.switchToProcess(processes.get(0));
			}
		}
	}
	
	public void roundRobin(boolean adding, final int processID) {
		if (adding) {
			if (processes.size() == 0) {
				processes.add(processID);
				processExecution.switchToProcess(processID);
				this.currentProcess = 0;
				createTimeSlice();
			} else {
				processes.add(processID);
			}
		} else {
			if (processes.size() > 0) {
				rrSwitchProcess();
				createTimeSlice();
			}
			System.out.println(processes.indexOf(processID));
			processes.remove(processes.indexOf(processID));
			if (processes.size() <= this.currentProcess) {
				this.currentProcess -= 1;
			}
		}
	}
	
	public void rrSwitchProcess() {
		System.out.println("current process index: " + this.currentProcess + ", processes size: " + processes);
		if (this.currentProcess >= processes.size() - 1){
			processExecution.switchToProcess(processes.get(0));
			this.currentProcess = 0;
		} else {
			processExecution.switchToProcess(processes.get(this.currentProcess + 1));
			this.currentProcess = this.currentProcess + 1;
		}
		
	}
	
	public void createTimeSlice() {
		System.out.println(this.timeSlice);
		if (this.timeSlice != null) {
			this.timeSlice.interrupt();
		}

		this.timeSlice = new Thread() {
			long startTime;
			public void setStartTime() {
		        startTime = System.currentTimeMillis();
			}
		    public void run() {
		    	if (startTime + 1000 > System.currentTimeMillis()) {
					while (startTime + 1000 > System.currentTimeMillis()) {}
					System.out.println("interupt");
					rrSwitchProcess();
		    	}
		    }  
		};
		this.timeSlice.getId();
		this.timeSlice.start();
	}
	
	public void shortestProcessNext(boolean adding, int processID) {
		if (adding) {
			
			
		} else {

		}
	}
	
	public void shortestRemainingTime(boolean adding, int processID) {
		if (adding) {
			
		} else {

		}
	}
	
	public void highestResponseRatioNext(boolean adding, int processID) {
		if (adding) {
			
		} else {

		}
	}
	
	public void feedback(boolean adding, int processID) {
		if (adding) {
			
		} else {

		}
	}
	
}
