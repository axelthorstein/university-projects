package com.ru.usty.elevator;

import java.util.concurrent.TimeUnit;

public class Person implements Runnable {

	private Elevator elevator;
	private int startFloor;
	private int ID;
	private int stopFloor;
	private Thread thread;
	
	
	public Person(int ID, int startFloor, int stopFloor){
	        this.ID = ID;
	        this.startFloor = startFloor;
	        this.stopFloor = stopFloor;
	        this.thread = new Thread(this, "" + this.ID);
	}
	
	@Override
	public void run(){
        while(true){
        	boolean permit = false;
		    try {
		        permit = semaphore.tryAcquire(1, TimeUnit.SECONDS);
		        if (permit) {
		            System.out.println("Semaphore acquired");
		            Thread.sleep(5);
		        } else {
		            System.out.println("Could not acquire semaphore");
		        }
		    } catch (InterruptedException e) {
		        throw new IllegalStateException(e);
		    } finally {
		        if (permit) {
		            semaphore.release();
		        }
		    }
        }

}

	public Thread getThread() {
		return this.thread;
	}
}
